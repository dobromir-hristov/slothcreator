{
  "interfaceLanguages": {
    "swift": [
      {
        "children": [
          {
            "title": "Essentials",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "SlothCreator Essentials",
                "type": "groupMarker"
              },
              {
                "path": "\/tutorials\/slothcreator\/creating-custom-sloths",
                "title": "Creating Custom Sloths",
                "type": "project"
              }
            ],
            "path": "\/tutorials\/slothcreator",
            "title": "Meet SlothCreator",
            "type": "overview"
          },
          {
            "path": "\/documentation\/slothcreator\/gettingstarted",
            "title": "Getting Started with Sloths",
            "type": "article"
          },
          {
            "children": [
              {
                "title": "Creating a Sloth",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/init(name:color:power:)",
                "title": "init(name: String, color: Color, power: Power)",
                "type": "init"
              },
              {
                "children": [
                  {
                    "title": "Generating a Sloth",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothgenerator\/generatesloth(in:)",
                    "title": "func generateSloth(in: Habitat) throws -> Sloth",
                    "type": "method"
                  }
                ],
                "path": "\/documentation\/slothcreator\/slothgenerator",
                "title": "SlothGenerator",
                "type": "protocol"
              },
              {
                "title": "Engaging in Activities",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/eat(_:quantity:)",
                "title": "func eat(Food, quantity: Int) -> Int",
                "type": "method"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/sleep(in:for:)",
                "title": "func sleep(in: Habitat, for: Int) -> Int",
                "type": "method"
              },
              {
                "title": "Getting the Sloth’s Schedule",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/schedule",
                "title": "var schedule: CareSchedule",
                "type": "property"
              },
              {
                "title": "Getting the Sloth’s Identity",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/name",
                "title": "var name: String",
                "type": "property"
              },
              {
                "title": "Getting Visual Attributes",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/color-swift.property",
                "title": "var color: Color",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the Standard Colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/green",
                    "title": "case green",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/orange",
                    "title": "case orange",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/yellow",
                    "title": "case yellow",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/blue",
                    "title": "case blue",
                    "type": "case"
                  },
                  {
                    "title": "Describing a Color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Comparing Colors",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Creating a Custom Color",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "symbol"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum\/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "symbol"
                  }
                ],
                "path": "\/documentation\/slothcreator\/sloth\/color-swift.enum",
                "title": "Sloth.Color",
                "type": "enum"
              },
              {
                "title": "Getting Magical Abilities",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/power-swift.property",
                "title": "var power: Power",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting the Power Categories",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/ice",
                    "title": "case ice",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/fire",
                    "title": "case fire",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/wind",
                    "title": "case wind",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/lightning",
                    "title": "case lightning",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/none",
                    "title": "case none",
                    "type": "case"
                  },
                  {
                    "title": "Describing a Power",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/description",
                    "title": "var description: String",
                    "type": "property"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/hashvalue",
                    "title": "var hashValue: Int",
                    "type": "property"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/hash(into:)",
                    "title": "func hash(into: inout Hasher)",
                    "type": "method"
                  },
                  {
                    "title": "Comparing Powers",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Creating a Custom Power",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/init(name:color:power:)",
                    "title": "init(name: String, color: Color, power: Power)",
                    "type": "init"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/init(rawvalue:)",
                    "title": "init?(rawValue: String)",
                    "type": "init"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "symbol"
                  },
                  {
                    "children": [
                      {
                        "title": "Instance Properties",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/hashvalue",
                        "title": "var hashValue: Int",
                        "type": "property"
                      },
                      {
                        "title": "Instance Methods",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/hash(into:)",
                        "title": "func hash(into: inout Hasher)",
                        "type": "method"
                      }
                    ],
                    "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum\/rawrepresentable-implementations",
                    "title": "RawRepresentable Implementations",
                    "type": "symbol"
                  }
                ],
                "path": "\/documentation\/slothcreator\/sloth\/power-swift.enum",
                "title": "Sloth.Power",
                "type": "enum"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/energylevel",
                "title": "var energyLevel: Int",
                "type": "property"
              }
            ],
            "path": "\/documentation\/slothcreator\/sloth",
            "title": "Sloth",
            "type": "struct"
          },
          {
            "title": "Sloth Creation",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Generating a Sloth",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/slothgenerator\/generatesloth(in:)",
                "title": "func generateSloth(in: Habitat) throws -> Sloth",
                "type": "method"
              }
            ],
            "path": "\/documentation\/slothcreator\/slothgenerator",
            "title": "SlothGenerator",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Generating a Sloth Name",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/namegenerator\/generatename(seed:)",
                "title": "func generateName(seed: Int) -> String",
                "type": "method"
              }
            ],
            "path": "\/documentation\/slothcreator\/namegenerator",
            "title": "NameGenerator",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a Habitat",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/habitat\/init(ishumid:iswarm:)",
                "title": "init(isHumid: Bool, isWarm: Bool)",
                "type": "init",
                "deprecated": true
              },
              {
                "title": "Configuring the Climate",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/habitat\/iswarm",
                "title": "var isWarm: Bool",
                "type": "property",
                "deprecated": true
              },
              {
                "path": "\/documentation\/slothcreator\/habitat\/ishumid",
                "title": "var isHumid: Bool",
                "type": "property",
                "deprecated": true
              },
              {
                "title": "Checking the Climate",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/habitat\/comfortlevel",
                "title": "var comfortLevel: Int",
                "type": "property",
                "deprecated": true
              }
            ],
            "path": "\/documentation\/slothcreator\/habitat",
            "title": "Habitat",
            "type": "struct",
            "deprecated": false
          },
          {
            "title": "Care and Feeding",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Performing an Activity",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/activity\/perform(with:)",
                "title": "func perform(with: inout Sloth) -> Speed",
                "type": "method"
              },
              {
                "children": [
                  {
                    "title": "Speeds",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/speed\/slow",
                    "title": "case slow",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/speed\/medium",
                    "title": "case medium",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/speed\/fast",
                    "title": "case fast",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/speed\/supersonic",
                    "title": "case supersonic",
                    "type": "case"
                  },
                  {
                    "title": "Comparing Speeds",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/speed\/!=(_:_:)",
                    "title": "static func != (Self, Self) -> Bool",
                    "type": "op"
                  },
                  {
                    "title": "Default Implementations",
                    "type": "groupMarker"
                  },
                  {
                    "children": [
                      {
                        "title": "Operators",
                        "type": "groupMarker"
                      },
                      {
                        "path": "\/documentation\/slothcreator\/speed\/!=(_:_:)",
                        "title": "static func != (Self, Self) -> Bool",
                        "type": "op"
                      }
                    ],
                    "path": "\/documentation\/slothcreator\/speed\/equatable-implementations",
                    "title": "Equatable Implementations",
                    "type": "symbol"
                  }
                ],
                "path": "\/documentation\/slothcreator\/speed",
                "title": "Speed",
                "type": "enum"
              }
            ],
            "path": "\/documentation\/slothcreator\/activity",
            "title": "Activity",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a Care Schedule",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/careschedule\/init(events:)",
                "title": "init(events: [(Date, Event)])",
                "type": "init"
              },
              {
                "title": "Getting the Schedule",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/careschedule\/events",
                "title": "var events: [(Date, Event)]",
                "type": "property"
              },
              {
                "children": [
                  {
                    "title": "Getting Meal Information",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/careschedule\/event\/breakfast",
                    "title": "case breakfast",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/careschedule\/event\/lunch",
                    "title": "case lunch",
                    "type": "case"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/careschedule\/event\/dinner",
                    "title": "case dinner",
                    "type": "case"
                  },
                  {
                    "title": "Getting Rest Data",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/careschedule\/event\/bedtime",
                    "title": "case bedtime",
                    "type": "case"
                  },
                  {
                    "title": "Creating Custom Events",
                    "type": "groupMarker"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/careschedule\/event\/activity(_:)",
                    "title": "case activity(Activity)",
                    "type": "case"
                  }
                ],
                "path": "\/documentation\/slothcreator\/careschedule\/event",
                "title": "CareSchedule.Event",
                "type": "enum"
              }
            ],
            "path": "\/documentation\/slothcreator\/careschedule",
            "title": "CareSchedule",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Generating Food",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/foodgenerator\/generatefood(in:)",
                "title": "func generateFood(in: Habitat) -> Sloth.Food",
                "type": "method"
              }
            ],
            "path": "\/documentation\/slothcreator\/foodgenerator",
            "title": "FoodGenerator",
            "type": "protocol"
          },
          {
            "children": [
              {
                "title": "Creating a Food Item",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/food\/init(name:energy:)",
                "title": "init(name: String, energy: Int)",
                "type": "init",
                "deprecated": true
              },
              {
                "title": "Getting the Food Details",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/food\/name",
                "title": "let name: String",
                "type": "property"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/food\/energy",
                "title": "let energy: Int",
                "type": "property",
                "deprecated": true
              },
              {
                "title": "Getting the Default Foods",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/food\/largeleaf",
                "title": "static let largeLeaf: Sloth.Food",
                "type": "property",
                "deprecated": true
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/food\/regularleaf",
                "title": "static let regularLeaf: Sloth.Food",
                "type": "property",
                "deprecated": true
              },
              {
                "path": "\/documentation\/slothcreator\/sloth\/food\/twig",
                "title": "static let twig: Sloth.Food",
                "type": "property",
                "deprecated": true
              }
            ],
            "path": "\/documentation\/slothcreator\/sloth\/food",
            "title": "Sloth.Food",
            "type": "struct",
            "deprecated": true
          },
          {
            "title": "Sloth Views",
            "type": "groupMarker"
          },
          {
            "children": [
              {
                "title": "Creating a Sloth View",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/slothview\/init(sloth:)",
                "title": "init(sloth: Binding<Sloth>)",
                "type": "init"
              },
              {
                "title": "Implementing the View",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/slothview\/body",
                "title": "var body: some View",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accentcolor(_:)",
                    "title": "func accentColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(activationpoint:)-2ttgz",
                    "title": "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(activationpoint:)-50yze",
                    "title": "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityaction(action:label:)",
                    "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityaction(named:_:)-48wwc",
                    "title": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityaction(named:_:)-6bg69",
                    "title": "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityaction(named:_:)-7qcrv",
                    "title": "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityactions(_:)",
                    "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityactivationpoint(_:)-7jctg",
                    "title": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityactivationpoint(_:)-9s50o",
                    "title": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitychartdescriptor(_:)",
                    "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitychildren(children:)",
                    "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-3ek2p",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-5npe7",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-6u9mx",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-7fcpx",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-7im58",
                    "title": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-8fru5",
                    "title": "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-8hfpx",
                    "title": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitycustomcontent(_:_:importance:)-xwjm",
                    "title": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityelement(children:)",
                    "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityfocused(_:)",
                    "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityfocused(_:equals:)",
                    "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityhint(_:)-3id4s",
                    "title": "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityhint(_:)-7v6ma",
                    "title": "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityhint(_:)-9wj9n",
                    "title": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityignoresinvertcolors(_:)",
                    "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityinputlabels(_:)-1icrt",
                    "title": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityinputlabels(_:)-2fznr",
                    "title": "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityinputlabels(_:)-8blry",
                    "title": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitylabel(_:)-62s4t",
                    "title": "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitylabel(_:)-9x8jw",
                    "title": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitylabel(_:)-evlg",
                    "title": "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitylabeledpair(role:id:in:)",
                    "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitylinkedgroup(id:in:)",
                    "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrepresentation(representation:)",
                    "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:)-169wv",
                    "title": "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:)-5gh10",
                    "title": "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:)-84jyf",
                    "title": "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:)-92b",
                    "title": "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1di85",
                    "title": "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entryid:entrylabel:)-1ncoa",
                    "title": "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entryid:entrylabel:)-2du53",
                    "title": "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8nt2x",
                    "title": "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entrylabel:)-19zzu",
                    "title": "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entrylabel:)-437vc",
                    "title": "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entrylabel:)-6g4t1",
                    "title": "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:entries:entrylabel:)-ih0t",
                    "title": "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:textranges:)-6p4yi",
                    "title": "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:textranges:)-7o3vw",
                    "title": "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:textranges:)-8n6zl",
                    "title": "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotor(_:textranges:)-98ccs",
                    "title": "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityrotorentry(id:in:)",
                    "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityshowslargecontentviewer()",
                    "title": "func accessibilityShowsLargeContentViewer() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityshowslargecontentviewer(_:)",
                    "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityvalue(_:)-2mp97",
                    "title": "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityvalue(_:)-4uh5c",
                    "title": "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/accessibilityvalue(_:)-9tp7x",
                    "title": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:actions:)-1ndnm",
                    "title": "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:actions:)-3qcvx",
                    "title": "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:actions:)-56ejr",
                    "title": "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:actions:message:)-754u6",
                    "title": "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:actions:message:)-8nptb",
                    "title": "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:actions:message:)-8z1xq",
                    "title": "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:presenting:actions:)-1j8uu",
                    "title": "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:presenting:actions:)-6xard",
                    "title": "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:presenting:actions:)-8wt75",
                    "title": "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:presenting:actions:message:)-6yyel",
                    "title": "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:presenting:actions:message:)-72vl9",
                    "title": "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(_:ispresented:presenting:actions:message:)-99kd9",
                    "title": "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/alert(ispresented:content:)",
                    "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(ispresented:error:actions:)",
                    "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alert(ispresented:error:actions:message:)",
                    "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/alert(item:content:)",
                    "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alignmentguide(_:computevalue:)-1xbfa",
                    "title": "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/alignmentguide(_:computevalue:)-2y8wb",
                    "title": "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/allowshittesting(_:)",
                    "title": "func allowsHitTesting(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/allowstightening(_:)",
                    "title": "func allowsTightening(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/anchorpreference(key:value:transform:)",
                    "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/animation(_:)",
                    "title": "func animation(Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/animation(_:value:)",
                    "title": "func animation<V>(Animation?, value: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/aspectratio(_:contentmode:)-92yed",
                    "title": "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/aspectratio(_:contentmode:)-9cz6q",
                    "title": "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/autocorrectiondisabled(_:)",
                    "title": "func autocorrectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/background(_:alignment:)",
                    "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(_:ignoressafeareaedges:)",
                    "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(_:in:fillstyle:)-8isvb",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(_:in:fillstyle:)-sgg2",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(alignment:content:)",
                    "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(ignoressafeareaedges:)",
                    "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(in:fillstyle:)-4qd4d",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/background(in:fillstyle:)-9r0ug",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/backgroundpreferencevalue(_:_:)",
                    "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/backgroundstyle(_:)",
                    "title": "func backgroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/badge(_:)-1ygao",
                    "title": "func badge(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/badge(_:)-6lp1w",
                    "title": "func badge(LocalizedStringKey?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/badge(_:)-6wiup",
                    "title": "func badge<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/badge(_:)-95spx",
                    "title": "func badge(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/bold(_:)",
                    "title": "func bold(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/border(_:width:)",
                    "title": "func border<S>(S, width: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/brightness(_:)",
                    "title": "func brightness(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/buttonbordershape(_:)",
                    "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/buttonstyle(_:)-2mjjc",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/buttonstyle(_:)-9k0h8",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/clipped(antialiased:)",
                    "title": "func clipped(antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/colorinvert()",
                    "title": "func colorInvert() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/colormultiply(_:)",
                    "title": "func colorMultiply(Color) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/colorscheme(_:)",
                    "title": "func colorScheme(ColorScheme) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/compositinggroup()",
                    "title": "func compositingGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-10hbl",
                    "title": "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-1ynle",
                    "title": "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-9d21v",
                    "title": "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6u8fn",
                    "title": "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-767c9",
                    "title": "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-8gsi5",
                    "title": "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-17dfh",
                    "title": "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-4o160",
                    "title": "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-8e4b5",
                    "title": "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-332a6",
                    "title": "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5f0of",
                    "title": "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-7pt0m",
                    "title": "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/containershape(_:)",
                    "title": "func containerShape<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/contentshape(_:_:eofill:)",
                    "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/contentshape(_:eofill:)",
                    "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/contenttransition(_:)",
                    "title": "func contentTransition(ContentTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/contextmenu(_:)",
                    "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/contextmenu(menuitems:)",
                    "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/contextmenu(presenting:menu:)",
                    "title": "func contextMenu<I, M>(presenting: I.Type, menu: (Set<I>) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/contrast(_:)",
                    "title": "func contrast(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/controlgroupstyle(_:)",
                    "title": "func controlGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/controlsize(_:)",
                    "title": "func controlSize(ControlSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/coordinatespace(name:)",
                    "title": "func coordinateSpace<T>(name: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/cornerradius(_:antialiased:)",
                    "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/datepickerstyle(_:)",
                    "title": "func datePickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/defaultfocus(_:_:priority:)",
                    "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/deletedisabled(_:)",
                    "title": "func deleteDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/disableautocorrection(_:)",
                    "title": "func disableAutocorrection(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/disabled(_:)",
                    "title": "func disabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/disclosuregroupstyle(_:)",
                    "title": "func disclosureGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/drawinggroup(opaque:colormode:)",
                    "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/dynamictypesize(_:)-7egzi",
                    "title": "func dynamicTypeSize<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/dynamictypesize(_:)-8dtbd",
                    "title": "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/edgesignoringsafearea(_:)",
                    "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/exportsitemproviders(_:onexport:)",
                    "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/exportsitemproviders(_:onexport:onedit:)",
                    "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-483e8",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-8sr9y",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1d5xw",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-476x3",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/filemover(ispresented:file:oncompletion:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/filemover(ispresented:files:oncompletion:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fixedsize()",
                    "title": "func fixedSize() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fixedsize(horizontal:vertical:)",
                    "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focusscope(_:)",
                    "title": "func focusScope(Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focussection()",
                    "title": "func focusSection() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focusable(_:)",
                    "title": "func focusable(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/focusable(_:onfocuschange:)",
                    "title": "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focused(_:)",
                    "title": "func focused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focused(_:equals:)",
                    "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focusedscenevalue(_:_:)",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/focusedvalue(_:_:)",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/font(_:)",
                    "title": "func font(Font?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/foregroundstyle(_:_:)",
                    "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/foregroundstyle(_:_:_:)",
                    "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/frame()",
                    "title": "func frame() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/frame(width:height:alignment:)",
                    "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/gaugestyle(_:)",
                    "title": "func gaugeStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/gesture(_:including:)",
                    "title": "func gesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/grayscale(_:)",
                    "title": "func grayscale(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/gridcellanchor(_:)",
                    "title": "func gridCellAnchor(UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/gridcellcolumns(_:)",
                    "title": "func gridCellColumns(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/gridcellunsizedaxes(_:)",
                    "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/gridcolumnalignment(_:)",
                    "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/groupboxstyle(_:)",
                    "title": "func groupBoxStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/handlesexternalevents(preferring:allowing:)",
                    "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/headerprominence(_:)",
                    "title": "func headerProminence(Prominence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/help(_:)-3b40r",
                    "title": "func help<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/help(_:)-59iip",
                    "title": "func help(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/help(_:)-9yn3u",
                    "title": "func help(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/hidden()",
                    "title": "func hidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/highprioritygesture(_:including:)",
                    "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/horizontalradiogrouplayout()",
                    "title": "func horizontalRadioGroupLayout() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/id(_:)",
                    "title": "func id<ID>(ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ignoressafearea(_:edges:)",
                    "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/imagescale(_:)",
                    "title": "func imageScale(Image.Scale) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/importsitemproviders(_:onimport:)",
                    "title": "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/interactionactivitytrackingtag(_:)",
                    "title": "func interactionActivityTrackingTag(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/interactivedismissdisabled(_:)",
                    "title": "func interactiveDismissDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/italic(_:)",
                    "title": "func italic(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/itemprovider(_:)",
                    "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/kerning(_:)",
                    "title": "func kerning(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/keyboardshortcut(_:)",
                    "title": "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/keyboardshortcut(_:modifiers:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/labelstyle(_:)",
                    "title": "func labelStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/labelshidden()",
                    "title": "func labelsHidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/layoutpriority(_:)",
                    "title": "func layoutPriority(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/layoutvalue(key:value:)",
                    "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/linelimit(_:)",
                    "title": "func lineLimit(Int?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/linelimit(_:reservesspace:)",
                    "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/linespacing(_:)",
                    "title": "func lineSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listitemtint(_:)-8pg38",
                    "title": "func listItemTint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listitemtint(_:)-9zh09",
                    "title": "func listItemTint(ListItemTint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listrowbackground(_:)",
                    "title": "func listRowBackground<V>(V?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listrowinsets(_:)",
                    "title": "func listRowInsets(EdgeInsets?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listrowseparator(_:edges:)",
                    "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listrowseparatortint(_:edges:)",
                    "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listsectionseparator(_:edges:)",
                    "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/listsectionseparatortint(_:edges:)",
                    "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/liststyle(_:)",
                    "title": "func listStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/luminancetoalpha()",
                    "title": "func luminanceToAlpha() -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/mask(_:)",
                    "title": "func mask<Mask>(Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/mask(alignment:_:)",
                    "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/menubuttonstyle(_:)",
                    "title": "func menuButtonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/menuindicator(_:)",
                    "title": "func menuIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/menustyle(_:)",
                    "title": "func menuStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/minimumscalefactor(_:)",
                    "title": "func minimumScaleFactor(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/monospaceddigit()",
                    "title": "func monospacedDigit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/movedisabled(_:)",
                    "title": "func moveDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/multilinetextalignment(_:)",
                    "title": "func multilineTextAlignment(TextAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationdestination(presenting:destination:)",
                    "title": "func navigationDestination<D, C>(presenting: D.Type, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationsplitviewcolumnwidth(_:)",
                    "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationsplitviewstyle(_:)",
                    "title": "func navigationSplitViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationsubtitle(_:)-38a8j",
                    "title": "func navigationSubtitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationsubtitle(_:)-82pa0",
                    "title": "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationsubtitle(_:)-9q08j",
                    "title": "func navigationSubtitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationtitle(_:)-1tj4v",
                    "title": "func navigationTitle<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationtitle(_:)-1x3q3",
                    "title": "func navigationTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationtitle(_:)-3ynzt",
                    "title": "func navigationTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/navigationtitle(_:)-9p5p1",
                    "title": "func navigationTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/offset(_:)",
                    "title": "func offset(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onappear(perform:)",
                    "title": "func onAppear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/oncommand(_:perform:)",
                    "title": "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/oncontinueuseractivity(_:perform:)",
                    "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/oncontinuoushover(coordinatespace:perform:)",
                    "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/oncopycommand(perform:)",
                    "title": "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/oncutcommand(perform:)",
                    "title": "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondeletecommand(perform:)",
                    "title": "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondisappear(perform:)",
                    "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondrag(_:)",
                    "title": "func onDrag(() -> NSItemProvider) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondrag(_:preview:)",
                    "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/ondrop(of:delegate:)-7jozb",
                    "title": "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondrop(of:delegate:)-9alkw",
                    "title": "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/ondrop(of:istargeted:perform:)-132m4",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondrop(of:istargeted:perform:)-446ou",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/ondrop(of:istargeted:perform:)-8p9dx",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ondrop(of:istargeted:perform:)-9edwv",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onexitcommand(perform:)",
                    "title": "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onmovecommand(perform:)",
                    "title": "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onopenurl(perform:)",
                    "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/onpastecommand(of:perform:)-7ibyx",
                    "title": "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onpastecommand(of:perform:)-9q3vn",
                    "title": "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/onpastecommand(of:validator:perform:)-26n6s",
                    "title": "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onpastecommand(of:validator:perform:)-47ud",
                    "title": "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onplaypausecommand(perform:)",
                    "title": "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onpreferencechange(_:perform:)",
                    "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onreceive(_:perform:)",
                    "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/onsubmit(of:_:)",
                    "title": "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ontapgesture(count:coordinatespace:perform:)",
                    "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/ontapgesture(count:perform:)",
                    "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/opacity(_:)",
                    "title": "func opacity(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/slothview\/overlay(_:alignment:)",
                    "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/overlay(_:ignoressafeareaedges:)",
                    "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/overlay(_:in:fillstyle:)",
                    "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/overlay(alignment:content:)",
                    "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/overlaypreferencevalue(_:_:)",
                    "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/overlaypreferencevalue(_:alignment:_:)",
                    "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/padding(_:)-743hh",
                    "title": "func padding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/padding(_:)-uy2z",
                    "title": "func padding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/padding(_:_:)",
                    "title": "func padding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/pagecommand(value:in:step:)",
                    "title": "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/pickerstyle(_:)",
                    "title": "func pickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/position(_:)",
                    "title": "func position(CGPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/position(x:y:)",
                    "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/preference(key:value:)",
                    "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/preferredcolorscheme(_:)",
                    "title": "func preferredColorScheme(ColorScheme?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/prefersdefaultfocus(_:in:)",
                    "title": "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/presentationdetents(_:)",
                    "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/presentationdetents(_:selection:)",
                    "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/presentationdragindicator(_:)",
                    "title": "func presentationDragIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/presentedwindowstyle(_:)",
                    "title": "func presentedWindowStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/presentedwindowtoolbarstyle(_:)",
                    "title": "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/previewcontext(_:)",
                    "title": "func previewContext<C>(C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/previewdevice(_:)",
                    "title": "func previewDevice(PreviewDevice?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/previewdisplayname(_:)",
                    "title": "func previewDisplayName(String?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/previewinterfaceorientation(_:)",
                    "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/previewlayout(_:)",
                    "title": "func previewLayout(PreviewLayout) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/progressviewstyle(_:)",
                    "title": "func progressViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/projectioneffect(_:)",
                    "title": "func projectionEffect(ProjectionTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/redacted(reason:)",
                    "title": "func redacted(reason: RedactionReasons) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/refreshable(action:)",
                    "title": "func refreshable(action: () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/renameaction(_:)-2gg5m",
                    "title": "func renameAction(() -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/renameaction(_:)-8zul2",
                    "title": "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/safeareainset(edge:alignment:spacing:content:)-6c69n",
                    "title": "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/safeareainset(edge:alignment:spacing:content:)-6grad",
                    "title": "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/saturation(_:)",
                    "title": "func saturation(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scaleeffect(_:anchor:)-3pj1v",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scaleeffect(_:anchor:)-6j41n",
                    "title": "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scaledtofill()",
                    "title": "func scaledToFill() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scaledtofit()",
                    "title": "func scaledToFit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scenepadding(_:)",
                    "title": "func scenePadding(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scenepadding(_:edges:)",
                    "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scrolldisabled(_:)",
                    "title": "func scrollDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scrolldismisseskeyboard(_:)",
                    "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/scrollindicators(_:axes:)",
                    "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchcompletion(_:)-2f0w4",
                    "title": "func searchCompletion<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchcompletion(_:)-7wlao",
                    "title": "func searchCompletion(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:placement:prompt:)-1cl7h",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:placement:prompt:)-3cjs5",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:placement:prompt:)-jeg6",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:placement:prompt:suggestions:)-8i1wh",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:placement:prompt:suggestions:)-8i4i3",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:placement:prompt:suggestions:)-xzg0",
                    "title": "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:scope:placement:prompt:scopes:)-1dc9b",
                    "title": "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:scope:placement:prompt:scopes:)-71u0m",
                    "title": "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:scope:placement:prompt:scopes:)-8gg6d",
                    "title": "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-38itt",
                    "title": "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-3n12t",
                    "title": "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-5e84j",
                    "title": "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:placement:prompt:token:)-3we7c",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:placement:prompt:token:)-5thzd",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:placement:prompt:token:)-rt3o",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:placement:prompt:token:suggestions:)-345st",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:placement:prompt:token:suggestions:)-4ttxi",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:placement:prompt:token:suggestions:)-9mc3w",
                    "title": "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-1bfhw",
                    "title": "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-33jup",
                    "title": "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5rxkz",
                    "title": "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3sgli",
                    "title": "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5j4q3",
                    "title": "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-6e7c9",
                    "title": "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-22o8a",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2f9ow",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-86g7e",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/sheet(ispresented:ondismiss:content:)",
                    "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/sheet(item:ondismiss:content:)",
                    "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/simultaneousgesture(_:including:)",
                    "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/submitlabel(_:)",
                    "title": "func submitLabel(SubmitLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/submitscope(_:)",
                    "title": "func submitScope(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/symbolvariant(_:)",
                    "title": "func symbolVariant(SymbolVariants) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tabitem(_:)",
                    "title": "func tabItem<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tabviewstyle(_:)",
                    "title": "func tabViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tablestyle(_:)",
                    "title": "func tableStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tag(_:)",
                    "title": "func tag<V>(V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/task(id:priority:_:)",
                    "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/task(priority:_:)",
                    "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/textcase(_:)",
                    "title": "func textCase(Text.Case?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/textcontenttype(_:)",
                    "title": "func textContentType(NSTextContentType?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/textfieldstyle(_:)",
                    "title": "func textFieldStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/textselection(_:)",
                    "title": "func textSelection<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tint(_:)-1i5jz",
                    "title": "func tint<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tint(_:)-8rprm",
                    "title": "func tint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/togglestyle(_:)",
                    "title": "func toggleStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbar(_:in:)",
                    "title": "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbar(content:)-6tjdb",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbar(content:)-997qd",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbar(id:content:)",
                    "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbarbackground(_:in:)-1a86s",
                    "title": "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbarbackground(_:in:)-7c9s3",
                    "title": "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbarcolorscheme(_:in:)",
                    "title": "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/toolbarrole(_:)",
                    "title": "func toolbarRole(ToolbarRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/touchbar(_:)",
                    "title": "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/touchbar(content:)",
                    "title": "func touchBar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/touchbarcustomizationlabel(_:)",
                    "title": "func touchBarCustomizationLabel(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/touchbaritempresence(_:)",
                    "title": "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/touchbaritemprincipal(_:)",
                    "title": "func touchBarItemPrincipal(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/tracking(_:)",
                    "title": "func tracking(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/transformanchorpreference(key:value:transform:)",
                    "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/transformpreference(_:_:)",
                    "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/transition(_:)",
                    "title": "func transition(AnyTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/truncationmode(_:)",
                    "title": "func truncationMode(Text.TruncationMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/unredacted()",
                    "title": "func unredacted() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/useractivity(_:element:_:)",
                    "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/useractivity(_:isactive:_:)",
                    "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/slothview\/zindex(_:)",
                    "title": "func zIndex(Double) -> some View",
                    "type": "method"
                  }
                ],
                "path": "\/documentation\/slothcreator\/slothview\/view-implementations",
                "title": "View Implementations",
                "type": "symbol"
              }
            ],
            "path": "\/documentation\/slothcreator\/slothview",
            "title": "SlothView",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Habitat View",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/habitatview\/init(habitat:)",
                "title": "init(habitat: Habitat)",
                "type": "init"
              },
              {
                "title": "Implementing the View",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/habitatview\/body",
                "title": "var body: some View",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accentcolor(_:)",
                    "title": "func accentColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(activationpoint:)-2y7jy",
                    "title": "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(activationpoint:)-3qzou",
                    "title": "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityaction(action:label:)",
                    "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityaction(named:_:)-2prib",
                    "title": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityaction(named:_:)-5jbpy",
                    "title": "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityaction(named:_:)-7unl",
                    "title": "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityactions(_:)",
                    "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityactivationpoint(_:)-44qfj",
                    "title": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityactivationpoint(_:)-711a6",
                    "title": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitychartdescriptor(_:)",
                    "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitychildren(children:)",
                    "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-2si0j",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-4o9y1",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-602ap",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-77q9t",
                    "title": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-8ew0g",
                    "title": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-8rowd",
                    "title": "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-9y3mj",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitycustomcontent(_:_:importance:)-bpz0",
                    "title": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityelement(children:)",
                    "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityfocused(_:)",
                    "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityfocused(_:equals:)",
                    "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityhint(_:)-72q3x",
                    "title": "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityhint(_:)-8w259",
                    "title": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityhint(_:)-aui5",
                    "title": "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityignoresinvertcolors(_:)",
                    "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityinputlabels(_:)-1d9ck",
                    "title": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityinputlabels(_:)-39o90",
                    "title": "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityinputlabels(_:)-5rlgd",
                    "title": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitylabel(_:)-2vwpo",
                    "title": "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitylabel(_:)-9q7hu",
                    "title": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitylabel(_:)-mxfw",
                    "title": "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitylabeledpair(role:id:in:)",
                    "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitylinkedgroup(id:in:)",
                    "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrepresentation(representation:)",
                    "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:)-1w17",
                    "title": "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:)-2iv27",
                    "title": "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:)-6qtz",
                    "title": "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:)-91orf",
                    "title": "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entryid:entrylabel:)-6olui",
                    "title": "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entryid:entrylabel:)-73llq",
                    "title": "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entryid:entrylabel:)-8rumy",
                    "title": "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entryid:entrylabel:)-9r5t7",
                    "title": "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entrylabel:)-4oe9q",
                    "title": "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entrylabel:)-75gmm",
                    "title": "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entrylabel:)-7iw3q",
                    "title": "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:entries:entrylabel:)-7wikb",
                    "title": "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:textranges:)-40tn6",
                    "title": "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:textranges:)-53ahu",
                    "title": "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:textranges:)-7hmdv",
                    "title": "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotor(_:textranges:)-8arin",
                    "title": "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityrotorentry(id:in:)",
                    "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityshowslargecontentviewer()",
                    "title": "func accessibilityShowsLargeContentViewer() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityshowslargecontentviewer(_:)",
                    "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityvalue(_:)-21zgs",
                    "title": "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityvalue(_:)-7y8b",
                    "title": "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/accessibilityvalue(_:)-9inyv",
                    "title": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:actions:)-4hnrc",
                    "title": "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:actions:)-5nhoy",
                    "title": "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:actions:)-6dpyg",
                    "title": "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:actions:message:)-20l0j",
                    "title": "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:actions:message:)-453ka",
                    "title": "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:actions:message:)-6qqzw",
                    "title": "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:presenting:actions:)-64n0e",
                    "title": "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:presenting:actions:)-90q2s",
                    "title": "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:presenting:actions:)-csax",
                    "title": "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:presenting:actions:message:)-3peyo",
                    "title": "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:presenting:actions:message:)-7y6br",
                    "title": "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(_:ispresented:presenting:actions:message:)-fd69",
                    "title": "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(ispresented:content:)",
                    "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(ispresented:error:actions:)",
                    "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(ispresented:error:actions:message:)",
                    "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/alert(item:content:)",
                    "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alignmentguide(_:computevalue:)-2myp0",
                    "title": "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/alignmentguide(_:computevalue:)-pc2d",
                    "title": "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/allowshittesting(_:)",
                    "title": "func allowsHitTesting(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/allowstightening(_:)",
                    "title": "func allowsTightening(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/anchorpreference(key:value:transform:)",
                    "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/animation(_:)",
                    "title": "func animation(Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/animation(_:value:)",
                    "title": "func animation<V>(Animation?, value: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/aspectratio(_:contentmode:)-3k2r6",
                    "title": "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/aspectratio(_:contentmode:)-49vf5",
                    "title": "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/autocorrectiondisabled(_:)",
                    "title": "func autocorrectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/background(_:alignment:)",
                    "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(_:ignoressafeareaedges:)",
                    "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(_:in:fillstyle:)-2ebqc",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(_:in:fillstyle:)-3dy8w",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(alignment:content:)",
                    "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(ignoressafeareaedges:)",
                    "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(in:fillstyle:)-9a2mh",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/background(in:fillstyle:)-tcpx",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/backgroundpreferencevalue(_:_:)",
                    "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/backgroundpreferencevalue(_:alignment:_:)",
                    "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/backgroundstyle(_:)",
                    "title": "func backgroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/badge(_:)-48gcn",
                    "title": "func badge(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/badge(_:)-4c4pu",
                    "title": "func badge(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/badge(_:)-5ivzu",
                    "title": "func badge<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/badge(_:)-9i4hv",
                    "title": "func badge(LocalizedStringKey?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/bold(_:)",
                    "title": "func bold(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/border(_:width:)",
                    "title": "func border<S>(S, width: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/brightness(_:)",
                    "title": "func brightness(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/buttonbordershape(_:)",
                    "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/buttonstyle(_:)-7iddg",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/buttonstyle(_:)-97zc0",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/clipped(antialiased:)",
                    "title": "func clipped(antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/colorinvert()",
                    "title": "func colorInvert() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/colormultiply(_:)",
                    "title": "func colorMultiply(Color) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/colorscheme(_:)",
                    "title": "func colorScheme(ColorScheme) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/compositinggroup()",
                    "title": "func compositingGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-43dff",
                    "title": "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5ta15",
                    "title": "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5tsug",
                    "title": "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-6mggj",
                    "title": "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-74p7k",
                    "title": "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-96mj8",
                    "title": "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-3pspb",
                    "title": "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-80qdm",
                    "title": "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-9vftw",
                    "title": "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-3kq4",
                    "title": "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-40ii4",
                    "title": "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-8ii7k",
                    "title": "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/containershape(_:)",
                    "title": "func containerShape<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/contentshape(_:_:eofill:)",
                    "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/contentshape(_:eofill:)",
                    "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/contenttransition(_:)",
                    "title": "func contentTransition(ContentTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/contextmenu(_:)",
                    "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/contextmenu(menuitems:)",
                    "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/contextmenu(presenting:menu:)",
                    "title": "func contextMenu<I, M>(presenting: I.Type, menu: (Set<I>) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/contrast(_:)",
                    "title": "func contrast(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/controlgroupstyle(_:)",
                    "title": "func controlGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/controlsize(_:)",
                    "title": "func controlSize(ControlSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/coordinatespace(name:)",
                    "title": "func coordinateSpace<T>(name: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/cornerradius(_:antialiased:)",
                    "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/datepickerstyle(_:)",
                    "title": "func datePickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/defaultfocus(_:_:priority:)",
                    "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/deletedisabled(_:)",
                    "title": "func deleteDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/disableautocorrection(_:)",
                    "title": "func disableAutocorrection(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/disabled(_:)",
                    "title": "func disabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/disclosuregroupstyle(_:)",
                    "title": "func disclosureGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/drawinggroup(opaque:colormode:)",
                    "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/dynamictypesize(_:)-4h182",
                    "title": "func dynamicTypeSize<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/dynamictypesize(_:)-69ou3",
                    "title": "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/edgesignoringsafearea(_:)",
                    "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/exportsitemproviders(_:onexport:)",
                    "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/exportsitemproviders(_:onexport:onedit:)",
                    "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-1eteb",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-2tk76",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-19vmn",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fileexporter(ispresented:documents:contenttype:oncompletion:)-1dhch",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/filemover(ispresented:file:oncompletion:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/filemover(ispresented:files:oncompletion:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fixedsize()",
                    "title": "func fixedSize() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fixedsize(horizontal:vertical:)",
                    "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/flipsforrighttoleftlayoutdirection(_:)",
                    "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focusscope(_:)",
                    "title": "func focusScope(Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focussection()",
                    "title": "func focusSection() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focusable(_:)",
                    "title": "func focusable(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/focusable(_:onfocuschange:)",
                    "title": "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focused(_:)",
                    "title": "func focused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focused(_:equals:)",
                    "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focusedscenevalue(_:_:)",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/focusedvalue(_:_:)",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/font(_:)",
                    "title": "func font(Font?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/foregroundstyle(_:_:)",
                    "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/foregroundstyle(_:_:_:)",
                    "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/frame()",
                    "title": "func frame() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/frame(width:height:alignment:)",
                    "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/gaugestyle(_:)",
                    "title": "func gaugeStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/gesture(_:including:)",
                    "title": "func gesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/grayscale(_:)",
                    "title": "func grayscale(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/gridcellanchor(_:)",
                    "title": "func gridCellAnchor(UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/gridcellcolumns(_:)",
                    "title": "func gridCellColumns(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/gridcellunsizedaxes(_:)",
                    "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/gridcolumnalignment(_:)",
                    "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/groupboxstyle(_:)",
                    "title": "func groupBoxStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/handlesexternalevents(preferring:allowing:)",
                    "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/headerprominence(_:)",
                    "title": "func headerProminence(Prominence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/help(_:)-5tjt1",
                    "title": "func help(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/help(_:)-7s1e5",
                    "title": "func help(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/help(_:)-7tg3i",
                    "title": "func help<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/hidden()",
                    "title": "func hidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/highprioritygesture(_:including:)",
                    "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/horizontalradiogrouplayout()",
                    "title": "func horizontalRadioGroupLayout() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/id(_:)",
                    "title": "func id<ID>(ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ignoressafearea(_:edges:)",
                    "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/imagescale(_:)",
                    "title": "func imageScale(Image.Scale) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/importsitemproviders(_:onimport:)",
                    "title": "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/interactionactivitytrackingtag(_:)",
                    "title": "func interactionActivityTrackingTag(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/interactivedismissdisabled(_:)",
                    "title": "func interactiveDismissDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/italic(_:)",
                    "title": "func italic(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/itemprovider(_:)",
                    "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/kerning(_:)",
                    "title": "func kerning(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/keyboardshortcut(_:)",
                    "title": "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/keyboardshortcut(_:modifiers:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/labelstyle(_:)",
                    "title": "func labelStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/labelshidden()",
                    "title": "func labelsHidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/layoutpriority(_:)",
                    "title": "func layoutPriority(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/layoutvalue(key:value:)",
                    "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/linelimit(_:)",
                    "title": "func lineLimit(Int?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/linelimit(_:reservesspace:)",
                    "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/linespacing(_:)",
                    "title": "func lineSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listitemtint(_:)-1aomy",
                    "title": "func listItemTint(ListItemTint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listitemtint(_:)-740en",
                    "title": "func listItemTint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listrowbackground(_:)",
                    "title": "func listRowBackground<V>(V?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listrowinsets(_:)",
                    "title": "func listRowInsets(EdgeInsets?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listrowseparator(_:edges:)",
                    "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listrowseparatortint(_:edges:)",
                    "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listsectionseparator(_:edges:)",
                    "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/listsectionseparatortint(_:edges:)",
                    "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/liststyle(_:)",
                    "title": "func listStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/luminancetoalpha()",
                    "title": "func luminanceToAlpha() -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/mask(_:)",
                    "title": "func mask<Mask>(Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/mask(alignment:_:)",
                    "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/menubuttonstyle(_:)",
                    "title": "func menuButtonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/menuindicator(_:)",
                    "title": "func menuIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/menustyle(_:)",
                    "title": "func menuStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/minimumscalefactor(_:)",
                    "title": "func minimumScaleFactor(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/monospaceddigit()",
                    "title": "func monospacedDigit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/movedisabled(_:)",
                    "title": "func moveDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/multilinetextalignment(_:)",
                    "title": "func multilineTextAlignment(TextAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationdestination(presenting:destination:)",
                    "title": "func navigationDestination<D, C>(presenting: D.Type, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationsplitviewcolumnwidth(_:)",
                    "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationsplitviewstyle(_:)",
                    "title": "func navigationSplitViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationsubtitle(_:)-32eg5",
                    "title": "func navigationSubtitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationsubtitle(_:)-3e9r9",
                    "title": "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationsubtitle(_:)-80tvy",
                    "title": "func navigationSubtitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationtitle(_:)-3o8qd",
                    "title": "func navigationTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationtitle(_:)-6llds",
                    "title": "func navigationTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationtitle(_:)-7ton6",
                    "title": "func navigationTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationtitle(_:)-95dqv",
                    "title": "func navigationTitle<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/offset(_:)",
                    "title": "func offset(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onappear(perform:)",
                    "title": "func onAppear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/oncommand(_:perform:)",
                    "title": "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/oncontinueuseractivity(_:perform:)",
                    "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/oncontinuoushover(coordinatespace:perform:)",
                    "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/oncopycommand(perform:)",
                    "title": "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/oncutcommand(perform:)",
                    "title": "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondeletecommand(perform:)",
                    "title": "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondisappear(perform:)",
                    "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrag(_:)",
                    "title": "func onDrag(() -> NSItemProvider) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrag(_:preview:)",
                    "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrop(of:delegate:)-4nmo2",
                    "title": "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrop(of:delegate:)-8q4zt",
                    "title": "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrop(of:istargeted:perform:)-1ithg",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrop(of:istargeted:perform:)-1y7k6",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrop(of:istargeted:perform:)-2olng",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/ondrop(of:istargeted:perform:)-4qyur",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onexitcommand(perform:)",
                    "title": "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onmovecommand(perform:)",
                    "title": "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onopenurl(perform:)",
                    "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onpastecommand(of:perform:)-1usdz",
                    "title": "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/onpastecommand(of:perform:)-2qk4g",
                    "title": "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onpastecommand(of:validator:perform:)-7ran5",
                    "title": "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/onpastecommand(of:validator:perform:)-8xx4l",
                    "title": "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onplaypausecommand(perform:)",
                    "title": "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onpreferencechange(_:perform:)",
                    "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onreceive(_:perform:)",
                    "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/onsubmit(of:_:)",
                    "title": "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ontapgesture(count:coordinatespace:perform:)",
                    "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/ontapgesture(count:perform:)",
                    "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/opacity(_:)",
                    "title": "func opacity(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/habitatview\/overlay(_:alignment:)",
                    "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/overlay(_:ignoressafeareaedges:)",
                    "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/overlay(_:in:fillstyle:)",
                    "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/overlay(alignment:content:)",
                    "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/overlaypreferencevalue(_:_:)",
                    "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/overlaypreferencevalue(_:alignment:_:)",
                    "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/padding(_:)-801z1",
                    "title": "func padding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/padding(_:)-9s1vs",
                    "title": "func padding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/padding(_:_:)",
                    "title": "func padding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/pagecommand(value:in:step:)",
                    "title": "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/pickerstyle(_:)",
                    "title": "func pickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/position(_:)",
                    "title": "func position(CGPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/position(x:y:)",
                    "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/preference(key:value:)",
                    "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/preferredcolorscheme(_:)",
                    "title": "func preferredColorScheme(ColorScheme?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/prefersdefaultfocus(_:in:)",
                    "title": "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/presentationdetents(_:)",
                    "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/presentationdetents(_:selection:)",
                    "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/presentationdragindicator(_:)",
                    "title": "func presentationDragIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/presentedwindowstyle(_:)",
                    "title": "func presentedWindowStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/presentedwindowtoolbarstyle(_:)",
                    "title": "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/previewcontext(_:)",
                    "title": "func previewContext<C>(C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/previewdevice(_:)",
                    "title": "func previewDevice(PreviewDevice?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/previewdisplayname(_:)",
                    "title": "func previewDisplayName(String?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/previewinterfaceorientation(_:)",
                    "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/previewlayout(_:)",
                    "title": "func previewLayout(PreviewLayout) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/progressviewstyle(_:)",
                    "title": "func progressViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/projectioneffect(_:)",
                    "title": "func projectionEffect(ProjectionTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/redacted(reason:)",
                    "title": "func redacted(reason: RedactionReasons) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/refreshable(action:)",
                    "title": "func refreshable(action: () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/renameaction(_:)-3gu0g",
                    "title": "func renameAction(() -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/renameaction(_:)-694y6",
                    "title": "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/safeareainset(edge:alignment:spacing:content:)-2l17e",
                    "title": "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/safeareainset(edge:alignment:spacing:content:)-5roir",
                    "title": "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/saturation(_:)",
                    "title": "func saturation(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scaleeffect(_:anchor:)-1eza",
                    "title": "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scaleeffect(_:anchor:)-hyta",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scaledtofill()",
                    "title": "func scaledToFill() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scaledtofit()",
                    "title": "func scaledToFit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scenepadding(_:)",
                    "title": "func scenePadding(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scenepadding(_:edges:)",
                    "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scrolldisabled(_:)",
                    "title": "func scrollDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scrolldismisseskeyboard(_:)",
                    "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/scrollindicators(_:axes:)",
                    "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchcompletion(_:)-1p00n",
                    "title": "func searchCompletion(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchcompletion(_:)-7p5fb",
                    "title": "func searchCompletion<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:placement:prompt:)-3l181",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:placement:prompt:)-5t1co",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:placement:prompt:)-9hnfb",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:placement:prompt:suggestions:)-4q2em",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:placement:prompt:suggestions:)-5a5pg",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:placement:prompt:suggestions:)-99bjw",
                    "title": "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:scope:placement:prompt:scopes:)-25x9u",
                    "title": "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:scope:placement:prompt:scopes:)-4xd52",
                    "title": "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:scope:placement:prompt:scopes:)-5if3j",
                    "title": "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-34swp",
                    "title": "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-6bi6y",
                    "title": "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:scope:placement:prompt:scopes:suggestions:)-97a9m",
                    "title": "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:placement:prompt:token:)-6kdo2",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:placement:prompt:token:)-7c2p2",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:placement:prompt:token:)-7hmzh",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:placement:prompt:token:suggestions:)-23h6a",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:placement:prompt:token:suggestions:)-32yvh",
                    "title": "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:placement:prompt:token:suggestions:)-50fc4",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-11waq",
                    "title": "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-2cb8v",
                    "title": "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-5andz",
                    "title": "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-1845b",
                    "title": "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-5i9gq",
                    "title": "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-7epkr",
                    "title": "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2q545",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-4e36p",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-8ypn4",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/sheet(ispresented:ondismiss:content:)",
                    "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/sheet(item:ondismiss:content:)",
                    "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/simultaneousgesture(_:including:)",
                    "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/submitlabel(_:)",
                    "title": "func submitLabel(SubmitLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/submitscope(_:)",
                    "title": "func submitScope(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/symbolvariant(_:)",
                    "title": "func symbolVariant(SymbolVariants) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tabitem(_:)",
                    "title": "func tabItem<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tabviewstyle(_:)",
                    "title": "func tabViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tablestyle(_:)",
                    "title": "func tableStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tag(_:)",
                    "title": "func tag<V>(V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/task(id:priority:_:)",
                    "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/task(priority:_:)",
                    "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/textcase(_:)",
                    "title": "func textCase(Text.Case?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/textcontenttype(_:)",
                    "title": "func textContentType(NSTextContentType?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/textfieldstyle(_:)",
                    "title": "func textFieldStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/textselection(_:)",
                    "title": "func textSelection<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tint(_:)-5rmvl",
                    "title": "func tint<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tint(_:)-5zx8g",
                    "title": "func tint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/togglestyle(_:)",
                    "title": "func toggleStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbar(_:in:)",
                    "title": "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbar(content:)-3w7cw",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbar(content:)-7bpon",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbar(id:content:)",
                    "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbarbackground(_:in:)-3jzpq",
                    "title": "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbarbackground(_:in:)-9ohsz",
                    "title": "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbarcolorscheme(_:in:)",
                    "title": "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/toolbarrole(_:)",
                    "title": "func toolbarRole(ToolbarRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/touchbar(_:)",
                    "title": "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/touchbar(content:)",
                    "title": "func touchBar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/touchbarcustomizationlabel(_:)",
                    "title": "func touchBarCustomizationLabel(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/touchbaritempresence(_:)",
                    "title": "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/touchbaritemprincipal(_:)",
                    "title": "func touchBarItemPrincipal(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/tracking(_:)",
                    "title": "func tracking(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/transformanchorpreference(key:value:transform:)",
                    "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/transformpreference(_:_:)",
                    "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/transition(_:)",
                    "title": "func transition(AnyTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/truncationmode(_:)",
                    "title": "func truncationMode(Text.TruncationMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/unredacted()",
                    "title": "func unredacted() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/useractivity(_:element:_:)",
                    "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/useractivity(_:isactive:_:)",
                    "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/habitatview\/zindex(_:)",
                    "title": "func zIndex(Double) -> some View",
                    "type": "method"
                  }
                ],
                "path": "\/documentation\/slothcreator\/habitatview\/view-implementations",
                "title": "View Implementations",
                "type": "symbol"
              }
            ],
            "path": "\/documentation\/slothcreator\/habitatview",
            "title": "HabitatView",
            "type": "struct"
          },
          {
            "children": [
              {
                "title": "Creating a Power Picker",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/powerpicker\/init(power:)",
                "title": "init(power: Binding<Sloth.Power>)",
                "type": "init"
              },
              {
                "title": "Implementing the View",
                "type": "groupMarker"
              },
              {
                "path": "\/documentation\/slothcreator\/powerpicker\/body",
                "title": "var body: some View",
                "type": "property"
              },
              {
                "title": "Default Implementations",
                "type": "groupMarker"
              },
              {
                "children": [
                  {
                    "title": "Instance Methods",
                    "type": "groupMarker"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accentcolor(_:)",
                    "title": "func accentColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(activationpoint:)-6rom8",
                    "title": "func accessibility(activationPoint: UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(activationpoint:)-7xmrr",
                    "title": "func accessibility(activationPoint: CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(addtraits:)",
                    "title": "func accessibility(addTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(hidden:)",
                    "title": "func accessibility(hidden: Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(hint:)",
                    "title": "func accessibility(hint: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(identifier:)",
                    "title": "func accessibility(identifier: String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(inputlabels:)",
                    "title": "func accessibility(inputLabels: [Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(label:)",
                    "title": "func accessibility(label: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(removetraits:)",
                    "title": "func accessibility(removeTraits: AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(selectionidentifier:)",
                    "title": "func accessibility(selectionIdentifier: AnyHashable) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(sortpriority:)",
                    "title": "func accessibility(sortPriority: Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibility(value:)",
                    "title": "func accessibility(value: Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityaction(_:_:)",
                    "title": "func accessibilityAction(AccessibilityActionKind, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityaction(action:label:)",
                    "title": "func accessibilityAction<Label>(action: () -> Void, label: () -> Label) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityaction(named:_:)-13431",
                    "title": "func accessibilityAction<S>(named: S, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityaction(named:_:)-7qart",
                    "title": "func accessibilityAction(named: Text, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityaction(named:_:)-9neq7",
                    "title": "func accessibilityAction(named: LocalizedStringKey, () -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityactions(_:)",
                    "title": "func accessibilityActions<Content>(() -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityactivationpoint(_:)-6nwt3",
                    "title": "func accessibilityActivationPoint(UnitPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityactivationpoint(_:)-6vtih",
                    "title": "func accessibilityActivationPoint(CGPoint) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityaddtraits(_:)",
                    "title": "func accessibilityAddTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityadjustableaction(_:)",
                    "title": "func accessibilityAdjustableAction((AccessibilityAdjustmentDirection) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitychartdescriptor(_:)",
                    "title": "func accessibilityChartDescriptor<R>(R) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitychildren(children:)",
                    "title": "func accessibilityChildren<V>(children: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-42hki",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-5uv2d",
                    "title": "func accessibilityCustomContent(LocalizedStringKey, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-6j4vp",
                    "title": "func accessibilityCustomContent(Text, Text, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-7aoo3",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, LocalizedStringKey, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-85wji",
                    "title": "func accessibilityCustomContent<L, V>(L, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-99g8b",
                    "title": "func accessibilityCustomContent(AccessibilityCustomContentKey, Text?, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-9n7t4",
                    "title": "func accessibilityCustomContent<V>(LocalizedStringKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitycustomcontent(_:_:importance:)-ztsl",
                    "title": "func accessibilityCustomContent<V>(AccessibilityCustomContentKey, V, importance: AXCustomContent.Importance) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityelement(children:)",
                    "title": "func accessibilityElement(children: AccessibilityChildBehavior) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityfocused(_:)",
                    "title": "func accessibilityFocused(AccessibilityFocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityfocused(_:equals:)",
                    "title": "func accessibilityFocused<Value>(AccessibilityFocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityheading(_:)",
                    "title": "func accessibilityHeading(AccessibilityHeadingLevel) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityhidden(_:)",
                    "title": "func accessibilityHidden(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityhint(_:)-2clog",
                    "title": "func accessibilityHint<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityhint(_:)-4r7r6",
                    "title": "func accessibilityHint(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityhint(_:)-6iot0",
                    "title": "func accessibilityHint(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityidentifier(_:)",
                    "title": "func accessibilityIdentifier(String) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityignoresinvertcolors(_:)",
                    "title": "func accessibilityIgnoresInvertColors(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityinputlabels(_:)-1em0i",
                    "title": "func accessibilityInputLabels([Text]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityinputlabels(_:)-3hdh8",
                    "title": "func accessibilityInputLabels([LocalizedStringKey]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityinputlabels(_:)-8f9ck",
                    "title": "func accessibilityInputLabels<S>([S]) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitylabel(_:)-1u14i",
                    "title": "func accessibilityLabel(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitylabel(_:)-4b6rc",
                    "title": "func accessibilityLabel<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitylabel(_:)-9xx4c",
                    "title": "func accessibilityLabel(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitylabeledpair(role:id:in:)",
                    "title": "func accessibilityLabeledPair<ID>(role: AccessibilityLabeledPairRole, id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitylinkedgroup(id:in:)",
                    "title": "func accessibilityLinkedGroup<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityremovetraits(_:)",
                    "title": "func accessibilityRemoveTraits(AccessibilityTraits) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrepresentation(representation:)",
                    "title": "func accessibilityRepresentation<V>(representation: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrespondstouserinteraction(_:)",
                    "title": "func accessibilityRespondsToUserInteraction(Bool) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:)-2nyro",
                    "title": "func accessibilityRotor<Content>(LocalizedStringKey, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:)-3628s",
                    "title": "func accessibilityRotor<Content>(Text, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:)-4ib5r",
                    "title": "func accessibilityRotor<Content>(AccessibilitySystemRotor, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:)-8ct9h",
                    "title": "func accessibilityRotor<L, Content>(L, entries: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entryid:entrylabel:)-2e39r",
                    "title": "func accessibilityRotor<EntryModel, ID>(AccessibilitySystemRotor, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entryid:entrylabel:)-4n08x",
                    "title": "func accessibilityRotor<EntryModel, ID>(Text, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entryid:entrylabel:)-64kpv",
                    "title": "func accessibilityRotor<L, EntryModel, ID>(L, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entryid:entrylabel:)-6z5q",
                    "title": "func accessibilityRotor<EntryModel, ID>(LocalizedStringKey, entries: [EntryModel], entryID: KeyPath<EntryModel, ID>, entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entrylabel:)-1l63y",
                    "title": "func accessibilityRotor<EntryModel>(AccessibilitySystemRotor, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entrylabel:)-1xyb9",
                    "title": "func accessibilityRotor<L, EntryModel>(L, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entrylabel:)-4pmux",
                    "title": "func accessibilityRotor<EntryModel>(Text, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:entries:entrylabel:)-8sd42",
                    "title": "func accessibilityRotor<EntryModel>(LocalizedStringKey, entries: [EntryModel], entryLabel: KeyPath<EntryModel, String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:textranges:)-1buww",
                    "title": "func accessibilityRotor(Text, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:textranges:)-42kk1",
                    "title": "func accessibilityRotor(LocalizedStringKey, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:textranges:)-6ynmn",
                    "title": "func accessibilityRotor(AccessibilitySystemRotor, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotor(_:textranges:)-8km9c",
                    "title": "func accessibilityRotor<L>(L, textRanges: [Range<String.Index>]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityrotorentry(id:in:)",
                    "title": "func accessibilityRotorEntry<ID>(id: ID, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityscrollaction(_:)",
                    "title": "func accessibilityScrollAction((Edge) -> Void) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityshowslargecontentviewer()",
                    "title": "func accessibilityShowsLargeContentViewer() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityshowslargecontentviewer(_:)",
                    "title": "func accessibilityShowsLargeContentViewer<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitysortpriority(_:)",
                    "title": "func accessibilitySortPriority(Double) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilitytextcontenttype(_:)",
                    "title": "func accessibilityTextContentType(AccessibilityTextContentType) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityvalue(_:)-4gdmf",
                    "title": "func accessibilityValue(LocalizedStringKey) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityvalue(_:)-5ukwn",
                    "title": "func accessibilityValue(Text) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/accessibilityvalue(_:)-7wqhc",
                    "title": "func accessibilityValue<S>(S) -> ModifiedContent<Self, AccessibilityAttachmentModifier>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:actions:)-59dl6",
                    "title": "func alert<S, A>(S, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:actions:)-94tfk",
                    "title": "func alert<A>(Text, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:actions:)-9bxip",
                    "title": "func alert<A>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:actions:message:)-2fe7t",
                    "title": "func alert<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:actions:message:)-5gugm",
                    "title": "func alert<S, A, M>(S, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:actions:message:)-8bs5i",
                    "title": "func alert<A, M>(Text, isPresented: Binding<Bool>, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:presenting:actions:)-7nkrh",
                    "title": "func alert<S, A, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:presenting:actions:)-98rsx",
                    "title": "func alert<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:presenting:actions:)-xoky",
                    "title": "func alert<A, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:presenting:actions:message:)-3vmlg",
                    "title": "func alert<S, A, M, T>(S, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:presenting:actions:message:)-5su3l",
                    "title": "func alert<A, M, T>(Text, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(_:ispresented:presenting:actions:message:)-6uzhj",
                    "title": "func alert<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(ispresented:content:)",
                    "title": "func alert(isPresented: Binding<Bool>, content: () -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(ispresented:error:actions:)",
                    "title": "func alert<E, A>(isPresented: Binding<Bool>, error: E?, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(ispresented:error:actions:message:)",
                    "title": "func alert<E, A, M>(isPresented: Binding<Bool>, error: E?, actions: (E) -> A, message: (E) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/alert(item:content:)",
                    "title": "func alert<Item>(item: Binding<Item?>, content: (Item) -> Alert) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alignmentguide(_:computevalue:)-3q115",
                    "title": "func alignmentGuide(VerticalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/alignmentguide(_:computevalue:)-96olk",
                    "title": "func alignmentGuide(HorizontalAlignment, computeValue: (ViewDimensions) -> CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/allowshittesting(_:)",
                    "title": "func allowsHitTesting(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/allowstightening(_:)",
                    "title": "func allowsTightening(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/anchorpreference(key:value:transform:)",
                    "title": "func anchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (Anchor<A>) -> K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/animation(_:)",
                    "title": "func animation(Animation?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/animation(_:value:)",
                    "title": "func animation<V>(Animation?, value: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/aspectratio(_:contentmode:)-4nvat",
                    "title": "func aspectRatio(CGFloat?, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/aspectratio(_:contentmode:)-v4vl",
                    "title": "func aspectRatio(CGSize, contentMode: ContentMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/autocorrectiondisabled(_:)",
                    "title": "func autocorrectionDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(_:alignment:)",
                    "title": "func background<Background>(Background, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(_:ignoressafeareaedges:)",
                    "title": "func background<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(_:in:fillstyle:)-8aof3",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(_:in:fillstyle:)-94w19",
                    "title": "func background<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(alignment:content:)",
                    "title": "func background<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(ignoressafeareaedges:)",
                    "title": "func background(ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(in:fillstyle:)-237gy",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/background(in:fillstyle:)-6hlc1",
                    "title": "func background<S>(in: S, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/backgroundpreferencevalue(_:_:)",
                    "title": "func backgroundPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/backgroundpreferencevalue(_:alignment:_:)",
                    "title": "func backgroundPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/backgroundstyle(_:)",
                    "title": "func backgroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/badge(_:)-3kut5",
                    "title": "func badge(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/badge(_:)-409oy",
                    "title": "func badge(LocalizedStringKey?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/badge(_:)-4r5qi",
                    "title": "func badge(Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/badge(_:)-7j1tt",
                    "title": "func badge<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/baselineoffset(_:)",
                    "title": "func baselineOffset(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/blendmode(_:)",
                    "title": "func blendMode(BlendMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/blur(radius:opaque:)",
                    "title": "func blur(radius: CGFloat, opaque: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/bold(_:)",
                    "title": "func bold(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/border(_:width:)",
                    "title": "func border<S>(S, width: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/brightness(_:)",
                    "title": "func brightness(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/buttonbordershape(_:)",
                    "title": "func buttonBorderShape(ButtonBorderShape) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/buttonstyle(_:)-3x88s",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/buttonstyle(_:)-6urw4",
                    "title": "func buttonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/clipshape(_:style:)",
                    "title": "func clipShape<S>(S, style: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/clipped(antialiased:)",
                    "title": "func clipped(antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/colorinvert()",
                    "title": "func colorInvert() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/colormultiply(_:)",
                    "title": "func colorMultiply(Color) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/colorscheme(_:)",
                    "title": "func colorScheme(ColorScheme) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/compositinggroup()",
                    "title": "func compositingGroup() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:actions:)-133r3",
                    "title": "func confirmationDialog<A>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:actions:)-5qf1l",
                    "title": "func confirmationDialog<A>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:actions:)-6nwi5",
                    "title": "func confirmationDialog<S, A>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-3k2lh",
                    "title": "func confirmationDialog<A, M>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-5w034",
                    "title": "func confirmationDialog<S, A, M>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:actions:message:)-atw6",
                    "title": "func confirmationDialog<A, M>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, actions: () -> A, message: () -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-1z8iv",
                    "title": "func confirmationDialog<S, A, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-6abw1",
                    "title": "func confirmationDialog<A, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:)-qyka",
                    "title": "func confirmationDialog<A, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4wbzn",
                    "title": "func confirmationDialog<A, M, T>(Text, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-4xufx",
                    "title": "func confirmationDialog<A, M, T>(LocalizedStringKey, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/confirmationdialog(_:ispresented:titlevisibility:presenting:actions:message:)-5v8r6",
                    "title": "func confirmationDialog<S, A, M, T>(S, isPresented: Binding<Bool>, titleVisibility: Visibility, presenting: T?, actions: (T) -> A, message: (T) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/containershape(_:)",
                    "title": "func containerShape<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/contentshape(_:_:eofill:)",
                    "title": "func contentShape<S>(ContentShapeKinds, S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/contentshape(_:eofill:)",
                    "title": "func contentShape<S>(S, eoFill: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/contenttransition(_:)",
                    "title": "func contentTransition(ContentTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/contextmenu(_:)",
                    "title": "func contextMenu<MenuItems>(ContextMenu<MenuItems>?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/contextmenu(menuitems:)",
                    "title": "func contextMenu<MenuItems>(menuItems: () -> MenuItems) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/contextmenu(menuitems:preview:)",
                    "title": "func contextMenu<M, P>(menuItems: () -> M, preview: () -> P) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/contextmenu(presenting:menu:)",
                    "title": "func contextMenu<I, M>(presenting: I.Type, menu: (Set<I>) -> M) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/contrast(_:)",
                    "title": "func contrast(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/controlgroupstyle(_:)",
                    "title": "func controlGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/controlsize(_:)",
                    "title": "func controlSize(ControlSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/coordinatespace(name:)",
                    "title": "func coordinateSpace<T>(name: T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/cornerradius(_:antialiased:)",
                    "title": "func cornerRadius(CGFloat, antialiased: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/datepickerstyle(_:)",
                    "title": "func datePickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/defaultappstorage(_:)",
                    "title": "func defaultAppStorage(UserDefaults) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/defaultfocus(_:_:priority:)",
                    "title": "func defaultFocus<V>(FocusState<V>.Binding, V, priority: DefaultFocusEvaluationPriority) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/deletedisabled(_:)",
                    "title": "func deleteDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/disableautocorrection(_:)",
                    "title": "func disableAutocorrection(Bool?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/disabled(_:)",
                    "title": "func disabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/disclosuregroupstyle(_:)",
                    "title": "func disclosureGroupStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/drawinggroup(opaque:colormode:)",
                    "title": "func drawingGroup(opaque: Bool, colorMode: ColorRenderingMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/dynamictypesize(_:)-8awwi",
                    "title": "func dynamicTypeSize(DynamicTypeSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/dynamictypesize(_:)-9ec9f",
                    "title": "func dynamicTypeSize<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/edgesignoringsafearea(_:)",
                    "title": "func edgesIgnoringSafeArea(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/environment(_:_:)",
                    "title": "func environment<V>(WritableKeyPath<EnvironmentValues, V>, V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/environmentobject(_:)",
                    "title": "func environmentObject<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/exportsitemproviders(_:onexport:)",
                    "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider]) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/exportsitemproviders(_:onexport:onedit:)",
                    "title": "func exportsItemProviders([UTType], onExport: () -> [NSItemProvider], onEdit: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-3pns1",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fileexporter(ispresented:document:contenttype:defaultfilename:oncompletion:)-9u4d5",
                    "title": "func fileExporter<D>(isPresented: Binding<Bool>, document: D?, contentType: UTType, defaultFilename: String?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fileexporter(ispresented:documents:contenttype:oncompletion:)-23il3",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fileexporter(ispresented:documents:contenttype:oncompletion:)-2exfr",
                    "title": "func fileExporter<C>(isPresented: Binding<Bool>, documents: C, contentType: UTType, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fileimporter(ispresented:allowedcontenttypes:allowsmultipleselection:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], allowsMultipleSelection: Bool, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fileimporter(ispresented:allowedcontenttypes:oncompletion:)",
                    "title": "func fileImporter(isPresented: Binding<Bool>, allowedContentTypes: [UTType], onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/filemover(ispresented:file:oncompletion:)",
                    "title": "func fileMover(isPresented: Binding<Bool>, file: URL?, onCompletion: (Result<URL, Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/filemover(ispresented:files:oncompletion:)",
                    "title": "func fileMover<C>(isPresented: Binding<Bool>, files: C, onCompletion: (Result<[URL], Error>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fixedsize()",
                    "title": "func fixedSize() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fixedsize(horizontal:vertical:)",
                    "title": "func fixedSize(horizontal: Bool, vertical: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/flipsforrighttoleftlayoutdirection(_:)",
                    "title": "func flipsForRightToLeftLayoutDirection(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focusscope(_:)",
                    "title": "func focusScope(Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focussection()",
                    "title": "func focusSection() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focusable(_:)",
                    "title": "func focusable(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/focusable(_:onfocuschange:)",
                    "title": "func focusable(Bool, onFocusChange: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focused(_:)",
                    "title": "func focused(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focused(_:equals:)",
                    "title": "func focused<Value>(FocusState<Value>.Binding, equals: Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focusedscenevalue(_:_:)",
                    "title": "func focusedSceneValue<T>(WritableKeyPath<FocusedValues, T?>, T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/focusedvalue(_:_:)",
                    "title": "func focusedValue<Value>(WritableKeyPath<FocusedValues, Value?>, Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/font(_:)",
                    "title": "func font(Font?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/fontweight(_:)",
                    "title": "func fontWeight(Font.Weight?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/foregroundcolor(_:)",
                    "title": "func foregroundColor(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/foregroundstyle(_:)",
                    "title": "func foregroundStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/foregroundstyle(_:_:)",
                    "title": "func foregroundStyle<S1, S2>(S1, S2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/foregroundstyle(_:_:_:)",
                    "title": "func foregroundStyle<S1, S2, S3>(S1, S2, S3) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/frame()",
                    "title": "func frame() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/frame(minwidth:idealwidth:maxwidth:minheight:idealheight:maxheight:alignment:)",
                    "title": "func frame(minWidth: CGFloat?, idealWidth: CGFloat?, maxWidth: CGFloat?, minHeight: CGFloat?, idealHeight: CGFloat?, maxHeight: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/frame(width:height:alignment:)",
                    "title": "func frame(width: CGFloat?, height: CGFloat?, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/gaugestyle(_:)",
                    "title": "func gaugeStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/gesture(_:including:)",
                    "title": "func gesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/grayscale(_:)",
                    "title": "func grayscale(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/gridcellanchor(_:)",
                    "title": "func gridCellAnchor(UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/gridcellcolumns(_:)",
                    "title": "func gridCellColumns(Int) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/gridcellunsizedaxes(_:)",
                    "title": "func gridCellUnsizedAxes(Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/gridcolumnalignment(_:)",
                    "title": "func gridColumnAlignment(HorizontalAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/groupboxstyle(_:)",
                    "title": "func groupBoxStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/handlesexternalevents(preferring:allowing:)",
                    "title": "func handlesExternalEvents(preferring: Set<String>, allowing: Set<String>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/headerprominence(_:)",
                    "title": "func headerProminence(Prominence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/help(_:)-68hih",
                    "title": "func help<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/help(_:)-6r74h",
                    "title": "func help(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/help(_:)-94jgm",
                    "title": "func help(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/hidden()",
                    "title": "func hidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/highprioritygesture(_:including:)",
                    "title": "func highPriorityGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/horizontalradiogrouplayout()",
                    "title": "func horizontalRadioGroupLayout() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/huerotation(_:)",
                    "title": "func hueRotation(Angle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/id(_:)",
                    "title": "func id<ID>(ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ignoressafearea(_:edges:)",
                    "title": "func ignoresSafeArea(SafeAreaRegions, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/imagescale(_:)",
                    "title": "func imageScale(Image.Scale) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/importsitemproviders(_:onimport:)",
                    "title": "func importsItemProviders([UTType], onImport: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/interactionactivitytrackingtag(_:)",
                    "title": "func interactionActivityTrackingTag(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/interactivedismissdisabled(_:)",
                    "title": "func interactiveDismissDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/italic(_:)",
                    "title": "func italic(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/itemprovider(_:)",
                    "title": "func itemProvider(Optional<() -> NSItemProvider?>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/kerning(_:)",
                    "title": "func kerning(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/keyboardshortcut(_:)",
                    "title": "func keyboardShortcut(KeyboardShortcut) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/keyboardshortcut(_:modifiers:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/keyboardshortcut(_:modifiers:localization:)",
                    "title": "func keyboardShortcut(KeyEquivalent, modifiers: EventModifiers, localization: KeyboardShortcut.Localization) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/labelstyle(_:)",
                    "title": "func labelStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/labelshidden()",
                    "title": "func labelsHidden() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/layoutpriority(_:)",
                    "title": "func layoutPriority(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/layoutvalue(key:value:)",
                    "title": "func layoutValue<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/linelimit(_:)",
                    "title": "func lineLimit(Int?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/linelimit(_:reservesspace:)",
                    "title": "func lineLimit(Int, reservesSpace: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/linespacing(_:)",
                    "title": "func lineSpacing(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listitemtint(_:)-75fs6",
                    "title": "func listItemTint(ListItemTint?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listitemtint(_:)-913d1",
                    "title": "func listItemTint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listrowbackground(_:)",
                    "title": "func listRowBackground<V>(V?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listrowinsets(_:)",
                    "title": "func listRowInsets(EdgeInsets?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listrowseparator(_:edges:)",
                    "title": "func listRowSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listrowseparatortint(_:edges:)",
                    "title": "func listRowSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listsectionseparator(_:edges:)",
                    "title": "func listSectionSeparator(Visibility, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/listsectionseparatortint(_:edges:)",
                    "title": "func listSectionSeparatorTint(Color?, edges: VerticalEdge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/liststyle(_:)",
                    "title": "func listStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/luminancetoalpha()",
                    "title": "func luminanceToAlpha() -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/mask(_:)",
                    "title": "func mask<Mask>(Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/mask(alignment:_:)",
                    "title": "func mask<Mask>(alignment: Alignment, () -> Mask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/matchedgeometryeffect(id:in:properties:anchor:issource:)",
                    "title": "func matchedGeometryEffect<ID>(id: ID, in: Namespace.ID, properties: MatchedGeometryProperties, anchor: UnitPoint, isSource: Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/menubuttonstyle(_:)",
                    "title": "func menuButtonStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/menuindicator(_:)",
                    "title": "func menuIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/menustyle(_:)",
                    "title": "func menuStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/minimumscalefactor(_:)",
                    "title": "func minimumScaleFactor(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/modifier(_:)",
                    "title": "func modifier<T>(T) -> ModifiedContent<Self, T>",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/monospaceddigit()",
                    "title": "func monospacedDigit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/movedisabled(_:)",
                    "title": "func moveDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/multilinetextalignment(_:)",
                    "title": "func multilineTextAlignment(TextAlignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationdestination(presenting:destination:)",
                    "title": "func navigationDestination<D, C>(presenting: D.Type, destination: (D) -> C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationsplitviewcolumnwidth(_:)",
                    "title": "func navigationSplitViewColumnWidth(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationsplitviewcolumnwidth(min:ideal:max:)",
                    "title": "func navigationSplitViewColumnWidth(min: CGFloat?, ideal: CGFloat, max: CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationsplitviewstyle(_:)",
                    "title": "func navigationSplitViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationsubtitle(_:)-257dd",
                    "title": "func navigationSubtitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationsubtitle(_:)-5v4mv",
                    "title": "func navigationSubtitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationsubtitle(_:)-957jk",
                    "title": "func navigationSubtitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationtitle(_:)-32stf",
                    "title": "func navigationTitle(LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationtitle(_:)-37hpk",
                    "title": "func navigationTitle(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationtitle(_:)-5pibe",
                    "title": "func navigationTitle<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationtitle(_:)-8i52p",
                    "title": "func navigationTitle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/navigationviewstyle(_:)",
                    "title": "func navigationViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/offset(_:)",
                    "title": "func offset(CGSize) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/offset(x:y:)",
                    "title": "func offset(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onappear(perform:)",
                    "title": "func onAppear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onchange(of:perform:)",
                    "title": "func onChange<V>(of: V, perform: (V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/oncommand(_:perform:)",
                    "title": "func onCommand(Selector, perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/oncontinueuseractivity(_:perform:)",
                    "title": "func onContinueUserActivity(String, perform: (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/oncontinuoushover(coordinatespace:perform:)",
                    "title": "func onContinuousHover(coordinateSpace: CoordinateSpace, perform: (HoverPhase) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/oncopycommand(perform:)",
                    "title": "func onCopyCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/oncutcommand(perform:)",
                    "title": "func onCutCommand(perform: (() -> [NSItemProvider])?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondeletecommand(perform:)",
                    "title": "func onDeleteCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondisappear(perform:)",
                    "title": "func onDisappear(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrag(_:)",
                    "title": "func onDrag(() -> NSItemProvider) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrag(_:preview:)",
                    "title": "func onDrag<V>(() -> NSItemProvider, preview: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrop(of:delegate:)-6c79t",
                    "title": "func onDrop(of: [UTType], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrop(of:delegate:)-98pwg",
                    "title": "func onDrop(of: [String], delegate: DropDelegate) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrop(of:istargeted:perform:)-225py",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrop(of:istargeted:perform:)-3vaby",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider], CGPoint) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrop(of:istargeted:perform:)-5k1l7",
                    "title": "func onDrop(of: [UTType], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/ondrop(of:istargeted:perform:)-60k9e",
                    "title": "func onDrop(of: [String], isTargeted: Binding<Bool>?, perform: ([NSItemProvider]) -> Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onexitcommand(perform:)",
                    "title": "func onExitCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onhover(perform:)",
                    "title": "func onHover(perform: (Bool) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onlongpressgesture(minimumduration:maximumdistance:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/onlongpressgesture(minimumduration:maximumdistance:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, maximumDistance: CGFloat, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onlongpressgesture(minimumduration:perform:onpressingchanged:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, perform: () -> Void, onPressingChanged: ((Bool) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/onlongpressgesture(minimumduration:pressing:perform:)",
                    "title": "func onLongPressGesture(minimumDuration: Double, pressing: ((Bool) -> Void)?, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onmovecommand(perform:)",
                    "title": "func onMoveCommand(perform: ((MoveCommandDirection) -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onopenurl(perform:)",
                    "title": "func onOpenURL(perform: (URL) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onpastecommand(of:perform:)-3rva5",
                    "title": "func onPasteCommand(of: [UTType], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/onpastecommand(of:perform:)-54unx",
                    "title": "func onPasteCommand(of: [String], perform: ([NSItemProvider]) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/onpastecommand(of:validator:perform:)-4hpf6",
                    "title": "func onPasteCommand<Payload>(of: [String], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onpastecommand(of:validator:perform:)-e851",
                    "title": "func onPasteCommand<Payload>(of: [UTType], validator: ([NSItemProvider]) -> Payload?, perform: (Payload) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onplaypausecommand(perform:)",
                    "title": "func onPlayPauseCommand(perform: (() -> Void)?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onpreferencechange(_:perform:)",
                    "title": "func onPreferenceChange<K>(K.Type, perform: (K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onreceive(_:perform:)",
                    "title": "func onReceive<P>(P, perform: (P.Output) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/onsubmit(of:_:)",
                    "title": "func onSubmit(of: SubmitTriggers, (() -> Void)) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ontapgesture(count:coordinatespace:perform:)",
                    "title": "func onTapGesture(count: Int, coordinateSpace: CoordinateSpace, perform: (CGPoint) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/ontapgesture(count:perform:)",
                    "title": "func onTapGesture(count: Int, perform: () -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/opacity(_:)",
                    "title": "func opacity(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "deprecated": true,
                    "path": "\/documentation\/slothcreator\/powerpicker\/overlay(_:alignment:)",
                    "title": "func overlay<Overlay>(Overlay, alignment: Alignment) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/overlay(_:ignoressafeareaedges:)",
                    "title": "func overlay<S>(S, ignoresSafeAreaEdges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/overlay(_:in:fillstyle:)",
                    "title": "func overlay<S, T>(S, in: T, fillStyle: FillStyle) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/overlay(alignment:content:)",
                    "title": "func overlay<V>(alignment: Alignment, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/overlaypreferencevalue(_:_:)",
                    "title": "func overlayPreferenceValue<Key, T>(Key.Type, (Key.Value) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/overlaypreferencevalue(_:alignment:_:)",
                    "title": "func overlayPreferenceValue<K, V>(K.Type, alignment: Alignment, (K.Value) -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/padding(_:)-ok3a",
                    "title": "func padding(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/padding(_:)-yahz",
                    "title": "func padding(EdgeInsets) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/padding(_:_:)",
                    "title": "func padding(Edge.Set, CGFloat?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/pagecommand(value:in:step:)",
                    "title": "func pageCommand<V>(value: Binding<V>, in: ClosedRange<V>, step: V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/persistentsystemoverlays(_:)",
                    "title": "func persistentSystemOverlays(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/pickerstyle(_:)",
                    "title": "func pickerStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/popover(ispresented:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Content>(isPresented: Binding<Bool>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/popover(item:attachmentanchor:arrowedge:content:)",
                    "title": "func popover<Item, Content>(item: Binding<Item?>, attachmentAnchor: PopoverAttachmentAnchor, arrowEdge: Edge, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/position(_:)",
                    "title": "func position(CGPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/position(x:y:)",
                    "title": "func position(x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/preference(key:value:)",
                    "title": "func preference<K>(key: K.Type, value: K.Value) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/preferredcolorscheme(_:)",
                    "title": "func preferredColorScheme(ColorScheme?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/prefersdefaultfocus(_:in:)",
                    "title": "func prefersDefaultFocus(Bool, in: Namespace.ID) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/presentationdetents(_:)",
                    "title": "func presentationDetents(Set<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/presentationdetents(_:selection:)",
                    "title": "func presentationDetents(Set<PresentationDetent>, selection: Binding<PresentationDetent>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/presentationdragindicator(_:)",
                    "title": "func presentationDragIndicator(Visibility) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/presentedwindowstyle(_:)",
                    "title": "func presentedWindowStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/presentedwindowtoolbarstyle(_:)",
                    "title": "func presentedWindowToolbarStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/previewcontext(_:)",
                    "title": "func previewContext<C>(C) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/previewdevice(_:)",
                    "title": "func previewDevice(PreviewDevice?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/previewdisplayname(_:)",
                    "title": "func previewDisplayName(String?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/previewinterfaceorientation(_:)",
                    "title": "func previewInterfaceOrientation(InterfaceOrientation) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/previewlayout(_:)",
                    "title": "func previewLayout(PreviewLayout) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/privacysensitive(_:)",
                    "title": "func privacySensitive(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/progressviewstyle(_:)",
                    "title": "func progressViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/projectioneffect(_:)",
                    "title": "func projectionEffect(ProjectionTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/redacted(reason:)",
                    "title": "func redacted(reason: RedactionReasons) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/refreshable(action:)",
                    "title": "func refreshable(action: () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/renameaction(_:)-1s34",
                    "title": "func renameAction(() -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/renameaction(_:)-4oubv",
                    "title": "func renameAction(FocusState<Bool>.Binding) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/rotation3deffect(_:axis:anchor:anchorz:perspective:)",
                    "title": "func rotation3DEffect(Angle, axis: (x: CGFloat, y: CGFloat, z: CGFloat), anchor: UnitPoint, anchorZ: CGFloat, perspective: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/rotationeffect(_:anchor:)",
                    "title": "func rotationEffect(Angle, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/safeareainset(edge:alignment:spacing:content:)-4hbd5",
                    "title": "func safeAreaInset<V>(edge: HorizontalEdge, alignment: VerticalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/safeareainset(edge:alignment:spacing:content:)-53ksm",
                    "title": "func safeAreaInset<V>(edge: VerticalEdge, alignment: HorizontalAlignment, spacing: CGFloat?, content: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/saturation(_:)",
                    "title": "func saturation(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scaleeffect(_:anchor:)-34dwp",
                    "title": "func scaleEffect(CGSize, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scaleeffect(_:anchor:)-667dw",
                    "title": "func scaleEffect(CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scaleeffect(x:y:anchor:)",
                    "title": "func scaleEffect(x: CGFloat, y: CGFloat, anchor: UnitPoint) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scaledtofill()",
                    "title": "func scaledToFill() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scaledtofit()",
                    "title": "func scaledToFit() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scenepadding(_:)",
                    "title": "func scenePadding(Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scenepadding(_:edges:)",
                    "title": "func scenePadding(ScenePadding, edges: Edge.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scrolldisabled(_:)",
                    "title": "func scrollDisabled(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scrolldismisseskeyboard(_:)",
                    "title": "func scrollDismissesKeyboard(ScrollDismissesKeyboardMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/scrollindicators(_:axes:)",
                    "title": "func scrollIndicators(ScrollIndicatorVisibility, axes: Axis.Set) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchcompletion(_:)-7jxo0",
                    "title": "func searchCompletion<T>(T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchcompletion(_:)-83yyh",
                    "title": "func searchCompletion(String) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:placement:prompt:)-44n0",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:placement:prompt:)-7o4o6",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:placement:prompt:)-7wgeh",
                    "title": "func searchable(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:placement:prompt:suggestions:)-91605",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:placement:prompt:suggestions:)-9ockk",
                    "title": "func searchable<V, S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: S, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:placement:prompt:suggestions:)-vgpk",
                    "title": "func searchable<S>(text: Binding<String>, placement: SearchFieldPlacement, prompt: Text?, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:scope:placement:prompt:scopes:)-4k7vz",
                    "title": "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:scope:placement:prompt:scopes:)-7st4t",
                    "title": "func searchable<D, V, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:scope:placement:prompt:scopes:)-8zqrr",
                    "title": "func searchable<V, S>(text: Binding<String>, scope: Binding<V>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:scope:placement:prompt:scopes:suggestions:)-1fih",
                    "title": "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:scope:placement:prompt:scopes:suggestions:)-7pwi1",
                    "title": "func searchable<D, V1, V2, S>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:scope:placement:prompt:scopes:suggestions:)-9i48q",
                    "title": "func searchable<D, V1, V2>(text: Binding<String>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:placement:prompt:token:)-17re8",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:placement:prompt:token:)-2grjp",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:placement:prompt:token:)-6ogzq",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:placement:prompt:token:suggestions:)-2eveg",
                    "title": "func searchable<C, T, V, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, suggestions: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:placement:prompt:token:suggestions:)-9p9lz",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:placement:prompt:token:suggestions:)-wwk8",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, suggestions: () -> S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-4ts4a",
                    "title": "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-6xvbe",
                    "title": "func searchable<C, T, D, V>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:scope:placement:prompt:token:scopes:)-au2g",
                    "title": "func searchable<C, T, D, V, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-2yhog",
                    "title": "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-3rvf",
                    "title": "func searchable<C, T, D, V1, V2, S>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:scope:placement:prompt:token:scopes:suggestions:)-i34a",
                    "title": "func searchable<C, T, D, V1, V2>(text: Binding<String>, tokens: Binding<C>, scope: Binding<D>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T, scopes: () -> V1, suggestions: () -> V2) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-2kycf",
                    "title": "func searchable<C, T, S>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: S, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-37igl",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: Text?, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/searchable(text:tokens:suggestedtokens:placement:prompt:token:)-865l2",
                    "title": "func searchable<C, T>(text: Binding<String>, tokens: Binding<C>, suggestedTokens: Binding<C>, placement: SearchFieldPlacement, prompt: LocalizedStringKey, token: (C.Element) -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/shadow(color:radius:x:y:)",
                    "title": "func shadow(color: Color, radius: CGFloat, x: CGFloat, y: CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/sheet(ispresented:ondismiss:content:)",
                    "title": "func sheet<Content>(isPresented: Binding<Bool>, onDismiss: (() -> Void)?, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/sheet(item:ondismiss:content:)",
                    "title": "func sheet<Item, Content>(item: Binding<Item?>, onDismiss: (() -> Void)?, content: (Item) -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/simultaneousgesture(_:including:)",
                    "title": "func simultaneousGesture<T>(T, including: GestureMask) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/speechadjustedpitch(_:)",
                    "title": "func speechAdjustedPitch(Double) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/speechalwaysincludespunctuation(_:)",
                    "title": "func speechAlwaysIncludesPunctuation(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/speechannouncementsqueued(_:)",
                    "title": "func speechAnnouncementsQueued(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/speechspellsoutcharacters(_:)",
                    "title": "func speechSpellsOutCharacters(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/strikethrough(_:pattern:color:)",
                    "title": "func strikethrough(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/submitlabel(_:)",
                    "title": "func submitLabel(SubmitLabel) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/submitscope(_:)",
                    "title": "func submitScope(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/swipeactions(edge:allowsfullswipe:content:)",
                    "title": "func swipeActions<T>(edge: HorizontalEdge, allowsFullSwipe: Bool, content: () -> T) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/symbolrenderingmode(_:)",
                    "title": "func symbolRenderingMode(SymbolRenderingMode?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/symbolvariant(_:)",
                    "title": "func symbolVariant(SymbolVariants) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tabitem(_:)",
                    "title": "func tabItem<V>(() -> V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tabviewstyle(_:)",
                    "title": "func tabViewStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tablestyle(_:)",
                    "title": "func tableStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tag(_:)",
                    "title": "func tag<V>(V) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/task(id:priority:_:)",
                    "title": "func task<T>(id: T, priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/task(priority:_:)",
                    "title": "func task(priority: TaskPriority, () async -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/textcase(_:)",
                    "title": "func textCase(Text.Case?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/textcontenttype(_:)",
                    "title": "func textContentType(NSTextContentType?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/textfieldstyle(_:)",
                    "title": "func textFieldStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/textselection(_:)",
                    "title": "func textSelection<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tint(_:)-5fw55",
                    "title": "func tint(Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tint(_:)-654jp",
                    "title": "func tint<S>(S?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/togglestyle(_:)",
                    "title": "func toggleStyle<S>(S) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbar(_:in:)",
                    "title": "func toolbar(Visibility, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbar(content:)-2w2oh",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbar(content:)-98sgd",
                    "title": "func toolbar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbar(id:content:)",
                    "title": "func toolbar<Content>(id: String, content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbarbackground(_:in:)-3gcpl",
                    "title": "func toolbarBackground<S>(S, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbarbackground(_:in:)-8jf07",
                    "title": "func toolbarBackground(Visibility, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbarcolorscheme(_:in:)",
                    "title": "func toolbarColorScheme(ColorScheme?, in: ToolbarPlacement...) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/toolbarrole(_:)",
                    "title": "func toolbarRole(ToolbarRole) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/touchbar(_:)",
                    "title": "func touchBar<Content>(TouchBar<Content>) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/touchbar(content:)",
                    "title": "func touchBar<Content>(content: () -> Content) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/touchbarcustomizationlabel(_:)",
                    "title": "func touchBarCustomizationLabel(Text) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/touchbaritempresence(_:)",
                    "title": "func touchBarItemPresence(TouchBarItemPresence) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/touchbaritemprincipal(_:)",
                    "title": "func touchBarItemPrincipal(Bool) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/tracking(_:)",
                    "title": "func tracking(CGFloat) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/transaction(_:)",
                    "title": "func transaction((inout Transaction) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/transformanchorpreference(key:value:transform:)",
                    "title": "func transformAnchorPreference<A, K>(key: K.Type, value: Anchor<A>.Source, transform: (inout K.Value, Anchor<A>) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/transformeffect(_:)",
                    "title": "func transformEffect(CGAffineTransform) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/transformenvironment(_:transform:)",
                    "title": "func transformEnvironment<V>(WritableKeyPath<EnvironmentValues, V>, transform: (inout V) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/transformpreference(_:_:)",
                    "title": "func transformPreference<K>(K.Type, (inout K.Value) -> Void) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/transition(_:)",
                    "title": "func transition(AnyTransition) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/truncationmode(_:)",
                    "title": "func truncationMode(Text.TruncationMode) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/underline(_:pattern:color:)",
                    "title": "func underline(Bool, pattern: Text.LineStyle.Pattern, color: Color?) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/unredacted()",
                    "title": "func unredacted() -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/useractivity(_:element:_:)",
                    "title": "func userActivity<P>(String, element: P?, (P, NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/useractivity(_:isactive:_:)",
                    "title": "func userActivity(String, isActive: Bool, (NSUserActivity) -> ()) -> some View",
                    "type": "method"
                  },
                  {
                    "path": "\/documentation\/slothcreator\/powerpicker\/zindex(_:)",
                    "title": "func zIndex(Double) -> some View",
                    "type": "method"
                  }
                ],
                "path": "\/documentation\/slothcreator\/powerpicker\/view-implementations",
                "title": "View Implementations",
                "type": "symbol"
              }
            ],
            "path": "\/documentation\/slothcreator\/powerpicker",
            "title": "PowerPicker",
            "type": "struct"
          }
        ],
        "path": "\/documentation\/slothcreator",
        "title": "SlothCreator",
        "type": "module"
      }
    ]
  },
  "schemaVersion": {
    "major": 0,
    "minor": 1,
    "patch": 0
  }
}
